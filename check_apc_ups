#!/bin/bash
##
#
# receive statusinfo from APC UPS
#
# Usage:
#       ./check_apc_ups -h IP-ADDRESS -c SNMP-COMMUNITY
#
#
# 2019-08-09:  Version 1    \\ Pit Wenkin
#
##

SNMPVersion="2c"
SNMPCommunity="public"
SNMPTimeout="10"
SNMPPort="161"


#OID declarations
OID_CHARGE="1.3.6.1.4.1.6574.4.3.1.1.0"
OID_CRIT="1.3.6.1.4.1.6574.4.3.1.2.0"
OID_DEVICE="1.3.6.1.4.1.6574.4.1.1.0"
OID_STATUS="1.3.6.1.4.1.6574.4.2.1.0"
OID_WARN="1.3.6.1.4.1.6574.4.3.1.4.0"


# nagios return values
export STATE_OK=0
export STATE_WARNING=1
export STATE_CRITICAL=2
export STATE_UNKNOWN=3
export STATE_DEPENDENT=4

usage()
{
        echo "usage: ./check_apc_ups -h [hostname] -c [community]"
        echo "options:"
        echo "  -h [snmp hostname]      Hostname"
        echo "  -c [community name]     community name (ex: public)"
        echo "  -p [snmp port]          port for snmp request (default: 161)"
        echo "  -t [snmp timeout]       duration before doing an timeout in seconds - default 10s"
        echo ""
        echo "examples: ./check_apc_ups -h 1.2.3.4 -c public"
        echo "          ./check_apc_ups -h 1.2.3.4 -p 4321 -c public -t 30"
        exit 3
}

if [ "$1" == "--help" ]; then
        usage; exit 0
fi

while getopts c:h:p:t: OPTNAME; do
        case "$OPTNAME" in
        h)      hostname="$OPTARG";;
        c)      SNMPCommunity="$OPTARG";;
        p)      SNMPPort="$OPTARG";;
        t)      SNMPTimeout="$OPTARG";;
        esac
done

if [ "$hostname" = "" ] || [ "$SNMPCommunity" = "" ] ; then
        usage
else
        SNMPArgs=" -OQne -v $SNMPVersion -c $SNMPCommunity -t $SNMPTimeout $hostname:$SNMPPort"

        info=`snmpget $SNMPArgs $OID_CHARGE $OID_CRIT $OID_DEVICE $OID_STATUS $OID_WARN 2> /dev/null`

        if [ "$?" != "0" ] ; then
                output="CRITICAL - Problem with SNMP request, check user/password/host"
                intReturn=$STATE_CRITICAL ;
        else
                CHARGE=$(echo "$info" | grep $OID_CHARGE | sed 's/.* = //g' | cut -d. -f1)
                CRIT=$(echo "$info" | grep $OID_CRIT | sed 's/.* = //g' | cut -d. -f1)
                DEVICE=$(echo "$info" | grep $OID_DEVICE | sed 's/.* = //g' | sed 's|"||g')
                STATUS=$(echo "$info" | grep $OID_STATUS | sed 's/.* = //g' | sed 's|"||g')
                WARN=$(echo "$info" | grep $OID_WARN | sed 's/.* = //g' | cut -d. -f1)

                if [ "$STATUS" = "OL DISCHRG" ]; then
                        output="Power failure - $STATUS\nCharge at $CHARGE% in $DEVICE"
                        intReturn=$STATE_CRITICAL
                elif [ "$STATUS" = "OL CHRG" ]; then
                        output="Power failure - $STATUS\nCharge at $CHARGE% in $DEVICE"
                        intReturn=$STATE_WARNING
                elif [ $CHARGE -eq "100" ]; then
                        output="Charge at $CHARGE% in $DEVICE"
                        intReturn=$STATE_OK
                elif [ $CHARGE -lt "100" -a $CHARGE -gt $WARN ]; then
                        output="Battery ACTIVE, Charge at $CHARGE% in $DEVICE"
                        intReturn=$STATE_WARNING
                elif [ $CHARGE -eq $WARN -o $CHARGE -lt $WARN -a $CHARGE -gt $CRIT ]; then
                        output="Battery WARNING, Charge at $CHARGE% in $DEVICE"
                        intReturn=$STATE_WARNING
                elif [ $CHARGE -eq $CRIT -o $CHARGE -lt $CRIT ]; then
                        output="Battery CRITICAL, Charge at $CHARGE% in $DEVICE"
                        intReturn=$STATE_CRITICAL
                else
                        output="Unknown Error"
                        intReturn=$STATE_UNKNOWN
                fi
        fi

        echo -e $output
        exit $intReturn
fi

